@property --glow {
  syntax: "<length>";
  inherits: true;
  initial-value: 1rem;
}

.wrapper {
  color: inherit;
  cursor: pointer;
  box-sizing: content-box;
  -webkit-user-select: none;
  user-select: none;
  border-radius: calc(var(--border-radius-pill) / 2);

  &:not([data-clear="true"]) {
    background-color: var(--color-background-accent);
    color: var(--color-foreground-contrast-background-accent);
    border: none;
    padding: 0.25rem 1rem;

    box-shadow:
      inset 0 calc(1 * var(--glow, 1rem)) calc(0.5 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 15%, transparent),
      inset 0 calc(0.125 * var(--glow, 1rem)) calc(0.125 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 7.5%, transparent);

    &:focus {
      background-color: var(--color-background-accent-30);
      box-shadow:
        inset 0 calc(-1 * var(--glow, 1rem)) calc(0.5 * var(--glow, 1rem)) color-mix(in srgb, var(--color-background-accent) 70%, transparent),
        0 0 calc(0.125 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 80%, transparent);
    }

    &:hover {
      background-color: var(--color-background-accent-10);
      box-shadow:
        inset 0 calc(1 * var(--glow, 1rem)) calc(0.5 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 20%, transparent),
        inset 0 calc(0.25 * var(--glow, 1rem)) calc(0.25 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 10%, transparent),
        0 calc(0.125 * var(--glow, 1rem)) calc(0.25 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-foreground) 20%, transparent);
    }

    &:active {
      background-color: var(--color-background-accent);
      box-shadow:
        inset 0 calc(-1 * var(--glow, 1rem)) calc(0.5 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 20%, transparent),
        inset 0 calc(-0.25 * var(--glow, 1rem)) calc(0.25 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 10%, transparent),
        inset 0 0 calc(0.125 * var(--glow, 1rem)) color-mix(in srgb, var(--color-reference-default-background) 90%, transparent),
        0 0 calc(0.125 * var(--glow, 1rem)) color-mix(in srgb, var(--color-background-accent) 50%, transparent);
    }
  }

  &:not([data-variant="none"]) {
    font-size: 1rem;
    padding-block: 0.5rem;
    border: none;
  }

  &:active,
  &:focus {
    &[data-clear="true"] {
      background-color: var(--color-default-background-opacity-20)
    }
  }

  &[data-clear="true"] {
    background-color: transparent;
    margin: 0;
    border: none;
  }

  &[data-size="xs"] {
    width: 1rem;
  }

  &[data-size="sm"] {
    width: 2rem;
  }

  &[data-size="md"] {
    width: 3rem;
  }

  &[data-size="lg"] {
    width: 4rem;
  }

  &[data-size="xl"] {
    width: 6rem;
  }

  &[data-size="full"] {
    width: 100%;
  }

  &[data-variant="default"] {
    background-color: var(--color-background-accent);
    color: var(--color-foreground-contrast-background-accent);
  }

  &[data-variant="accent"] {
    background-color: var(--color-background-accent);
    color: var(--color-foreground-contrast-background-accent);
  }

  &[data-variant="danger"] {
    background-color: var(--color-background-danger);
    color: var(--color-foreground-contrast-background-danger);
  }

  &[data-variant="warning"] {
    background-color: var(--color-background-warning);
    color: var(--color-foreground-contrast-background-warning);
  }

  &[data-variant="success"] {
    background-color: var(--color-background-success);
    color: var(--color-foreground-contrast-background-success);
  }

  &[data-variant="info"] {
    background-color: var(--color-background-info);
    color: var(--color-foreground-contrast-background-info);
  }

  &[data-variant="inverted"] {
    background-color: var(--color-reference-default-background);
    color: var(--color-foreground-primary);
  }
}